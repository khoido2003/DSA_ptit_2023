#include <iostream>
#include <stack>
#include <queue>
#define MAX 100

using namespace std;

// //Using Matrix List

int A[MAX][MAX];
int n, start;
int X[MAX];
bool chuaxet[MAX];

void dataInput() {
    cin >> n >> start;
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j)
            cin >> A[i][j];
    }
}

void graphInit() {
    for (int i = 1; i <= n; ++i)
        chuaxet[i] = true;
}

void printCycle() {
    for (int j = 1; j <= n; ++j) {
        cout << X[j] << " ";
    }
    cout << start << endl;
}

void hmt(int k) {
    for (int y = 1; y <= n; ++y) {
        if (A[y][X[k - 1]] == 1) {
            if ((k == n + 1) && (y == start)) {
                printCycle();
            } else {
                if (chuaxet[y]) {
                    X[k] = y;
                    chuaxet[y] = false;
                    hmt(k + 1);
                    chuaxet[y] = true;
                }
            }
        }
    }
}

int main() {
    dataInput();
    graphInit();
    X[1] = start;
    chuaxet[start] = false;
    hmt(2);

    return 0;
}


/////////////////////////////////////////

// //Using Adjacency List

// #include <iostream>
// #include <vector>
// #include <unordered_set>
// #define MAX 100

// using namespace std;

// vector<unordered_set<int>> adjacencyList;
// int n, start;
// int X[MAX];
// bool chuaxet[MAX];

// void dataInput() {
//     cin >> n >> start;
//     adjacencyList.resize(n + 1);
//     for (int i = 1; i <= n; ++i) {
//         for (int j = 1; j <= n; ++j) {
//             int value;
//             cin >> value;
//             if (value == 1) {
//                 adjacencyList[i].insert(j);
//             }
//         }
//     }
// }

// void graphInit() {
//     for (int i = 1; i <= n; ++i)
//         chuaxet[i] = true;
// }

// void printCycle() {
//     for (int j = 1; j <= n; ++j) {
//         cout << X[j] << " ";
//     }
//     cout << start << endl;
// }

// void hmt(int k) {
//     for (const int& y : adjacencyList[X[k - 1]]) {
//         if ((k == n + 1) && (y == start)) {
//             printCycle();
//         } else {
//             if (chuaxet[y]) {
//                 X[k] = y;
//                 chuaxet[y] = false;
//                 hmt(k + 1);
//                 chuaxet[y] = true;
//             }
//         }
//     }
// }

// int main() {
//     dataInput();
//     graphInit();
//     X[1] = start;
//     chuaxet[start] = false;
//     hmt(2);

//     return 0;
// }


// //TEST CASE

// Case=1

// input=

// 5

// 1

// 0  1  0  1  0  

// 1  0  1  0  1  

// 0  1  0  1  1  

// 1  0  1  0  1  

// 0  1  1  1  0  

// output=

// 1 2 3 5 4 1

// 1 2 5 3 4 1

// 1 4 3 5 2 1

// 1 4 5 3 2 1



// Case=2

// input=

// 20

// 1

// 0  1  0  0  1  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  

// 1  0  1  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  

// 0  1  0  1  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  

// 0  0  1  0  1  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  

// 1  0  0  1  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  

// 1  0  0  0  0  0  1  0  0  0  0  0  0  0  1  0  0  0  0  0  

// 0  0  0  0  0  1  0  1  0  0  0  0  0  0  0  0  1  0  0  0  

// 0  1  0  0  0  0  1  0  1  0  0  0  0  0  0  0  0  0  0  0  

// 0  0  0  0  0  0  0  1  0  1  0  0  0  0  0  0  0  1  0  0  

// 0  0  1  0  0  0  0  0  1  0  1  0  0  0  0  0  0  0  0  0  

// 0  0  0  0  0  0  0  0  0  1  0  1  0  0  0  0  0  0  1  0  

// 0  0  0  1  0  0  0  0  0  0  1  0  1  0  0  0  0  0  0  0  

// 0  0  0  0  0  0  0  0  0  0  0  1  0  1  0  0  0  0  0  1  

// 0  0  0  0  1  0  0  0  0  0  0  0  1  0  1  0  0  0  0  0  

// 0  0  0  0  0  1  0  0  0  0  0  0  0  1  0  1  0  0  0  0  

// 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  1  0  0  1  

// 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  1  0  1  0  0  

// 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  1  0  1  0  

// 0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  1  

// 0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  0  0  1  0  

// output=

//  1 2 3 4 5 14 13 12 11 10 9 8 7 17 18 19 20 16 15 6 1

//  1 2 3 4 5 14 15 16 17 18 19 20 13 12 11 10 9 8 7 6 1

//  1 2 3 4 12 11 10 9 8 7 6 15 16 17 18 19 20 13 14 5 1

//  1 2 3 4 12 13 20 16 17 18 19 11 10 9 8 7 6 15 14 5 1

//  1 2 3 10 9 8 7 6 15 14 13 20 16 17 18 19 11 12 4 5 1

//  1 2 3 10 9 8 7 17 18 19 11 12 4 5 14 13 20 16 15 6 1

//  1 2 3 10 11 12 4 5 14 13 20 19 18 9 8 7 17 16 15 6 1

//  1 2 3 10 11 19 18 9 8 7 17 16 20 13 12 4 5 14 15 6 1

//  1 2 3 10 11 19 20 13 12 4 5 14 15 16 17 18 9 8 7 6 1

//  1 2 3 10 11 19 20 16 17 18 9 8 7 6 15 14 13 12 4 5 1

//  1 2 8 7 6 15 14 13 12 11 19 20 16 17 18 9 10 3 4 5 1

//  1 2 8 7 6 15 16 17 18 9 10 3 4 12 11 19 20 13 14 5 1

//  1 2 8 7 17 16 20 13 12 11 19 18 9 10 3 4 5 14 15 6 1

//  1 2 8 7 17 18 9 10 3 4 5 14 13 12 11 19 20 16 15 6 1

//  1 2 8 9 10 3 4 5 14 15 16 20 13 12 11 19 18 17 7 6 1

//  1 2 8 9 10 3 4 12 11 19 18 17 7 6 15 16 20 13 14 5 1

//  1 2 8 9 18 17 7 6 15 16 20 19 11 10 3 4 12 13 14 5 1

//  1 2 8 9 18 19 11 10 3 4 12 13 20 16 17 7 6 15 14 5 1

//  1 2 8 9 18 19 20 13 12 11 10 3 4 5 14 15 16 17 7 6 1

//  1 2 8 9 18 19 20 16 17 7 6 15 14 13 12 11 10 3 4 5 1

//  1 5 4 3 2 8 7 17 16 20 19 18 9 10 11 12 13 14 15 6 1

//  1 5 4 3 2 8 9 10 11 12 13 14 15 16 20 19 18 17 7 6 1

//  1 5 4 3 10 9 18 17 16 20 19 11 12 13 14 15 6 7 8 2 1

//  1 5 4 3 10 11 12 13 14 15 6 7 17 16 20 19 18 9 8 2 1

//  1 5 4 12 11 10 3 2 8 9 18 19 20 13 14 15 16 17 7 6 1

//  1 5 4 12 11 19 18 9 10 3 2 8 7 17 16 20 13 14 15 6 1

//  1 5 4 12 11 19 18 17 16 20 13 14 15 6 7 8 9 10 3 2 1

//  1 5 4 12 11 19 20 13 14 15 16 17 18 9 10 3 2 8 7 6 1

//  1 5 4 12 13 14 15 6 7 8 9 18 17 16 20 19 11 10 3 2 1

//  1 5 4 12 13 14 15 16 20 19 11 10 3 2 8 9 18 17 7 6 1

//  1 5 14 13 12 4 3 2 8 7 17 18 9 10 11 19 20 16 15 6 1

//  1 5 14 13 12 4 3 10 11 19 20 16 15 6 7 17 18 9 8 2 1

//  1 5 14 13 20 16 15 6 7 17 18 19 11 12 4 3 10 9 8 2 1

//  1 5 14 13 20 19 11 12 4 3 10 9 18 17 16 15 6 7 8 2 1

//  1 5 14 13 20 19 18 9 10 11 12 4 3 2 8 7 17 16 15 6 1

//  1 5 14 13 20 19 18 17 16 15 6 7 8 9 10 11 12 4 3 2 1

//  1 5 14 15 6 7 8 9 10 11 19 18 17 16 20 13 12 4 3 2 1

//  1 5 14 15 6 7 17 16 20 13 12 4 3 10 11 19 18 9 8 2 1

//  1 5 14 15 16 17 18 9 10 11 19 20 13 12 4 3 2 8 7 6 1

//  1 5 14 15 16 20 13 12 4 3 2 8 9 10 11 19 18 17 7 6 1

//  1 6 7 8 2 3 4 12 13 20 19 11 10 9 18 17 16 15 14 5 1

//  1 6 7 8 2 3 10 9 18 17 16 15 14 13 20 19 11 12 4 5 1

//  1 6 7 8 9 10 11 12 13 20 19 18 17 16 15 14 5 4 3 2 1

//  1 6 7 8 9 18 17 16 15 14 5 4 12 13 20 19 11 10 3 2 1

//  1 6 7 17 16 15 14 5 4 3 10 11 12 13 20 19 18 9 8 2 1

//  1 6 7 17 16 15 14 13 20 19 18 9 8 2 3 10 11 12 4 5 1

//  1 6 7 17 18 9 8 2 3 10 11 19 20 16 15 14 13 12 4 5 1

//  1 6 7 17 18 19 11 10 9 8 2 3 4 12 13 20 16 15 14 5 1

//  1 6 7 17 18 19 11 12 13 20 16 15 14 5 4 3 10 9 8 2 1

//  1 6 7 17 18 19 20 16 15 14 13 12 11 10 9 8 2 3 4 5 1

//  1 6 15 14 5 4 3 10 9 18 19 11 12 13 20 16 17 7 8 2 1

//  1 6 15 14 5 4 12 13 20 16 17 7 8 9 18 19 11 10 3 2 1

//  1 6 15 14 13 12 11 10 9 18 19 20 16 17 7 8 2 3 4 5 1

//  1 6 15 14 13 20 16 17 7 8 2 3 10 9 18 19 11 12 4 5 1

//  1 6 15 16 17 7 8 2 3 4 12 11 10 9 18 19 20 13 14 5 1

//  1 6 15 16 17 7 8 9 18 19 20 13 14 5 4 12 11 10 3 2 1

//  1 6 15 16 20 13 14 5 4 12 11 19 18 17 7 8 9 10 3 2 1

//  1 6 15 16 20 19 11 10 9 18 17 7 8 2 3 4 12 13 14 5 1

//  1 6 15 16 20 19 11 12 13 14 5 4 3 10 9 18 17 7 8 2 1

//  1 6 15 16 20 19 18 17 7 8 9 10 11 12 13 14 5 4 3 2 1